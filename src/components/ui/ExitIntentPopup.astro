---
const popupContent = {
  title: "¡Espera! No te vayas sin tu consulta gratuita",
  subtitle: "Obtén una sesión de evaluación personalizada GRATIS",
  benefits: [
    "Evaluación completa de tu estado físico",
    "Plan de entrenamiento personalizado",
    "Guía nutricional básica",
    "Sesión de 30 minutos conmigo"
  ],
  cta: "¡Quiero mi consulta gratuita!",
  disclaimer: "Solo para nuevos clientes. Oferta válida por tiempo limitado."
};
---

<div id="exit-intent-popup" class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 hidden">
  <div class="bg-white dark:bg-gray-900 rounded-2xl p-8 max-w-lg mx-4 text-center relative transform scale-95 transition-all duration-300">
    <!-- Close Button -->
    <button 
      id="close-popup" 
      class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors"
      aria-label="Cerrar popup"
    >
      <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>

    <!-- Content -->
    <div class="mb-6">
      <div class="w-16 h-16 bg-primary-light/20 dark:bg-primary-dark/20 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-8 h-8 text-primary-dark dark:text-primary-light" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>
      
      <h2 class="text-2xl font-black text-gray-900 dark:text-white mb-3">
        {popupContent.title}
      </h2>
      
      <p class="text-lg text-primary-dark dark:text-primary-light font-semibold mb-4">
        {popupContent.subtitle}
      </p>
    </div>

    <!-- Benefits List -->
    <div class="space-y-3 mb-8 text-left">
      {popupContent.benefits.map((benefit) => (
        <div class="flex items-center gap-3">
          <svg class="w-5 h-5 text-primary-dark dark:text-primary-light flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          <span class="text-gray-700 dark:text-gray-300">{benefit}</span>
        </div>
      ))}
    </div>

    <!-- CTA Button -->
    <a 
      href="/contacto" 
      class="block w-full py-4 px-6 bg-primary-dark hover:bg-primary text-white font-bold rounded-full transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl mb-4"
    >
      {popupContent.cta}
    </a>

    <!-- Disclaimer -->
    <p class="text-sm text-gray-500 dark:text-gray-400">
      {popupContent.disclaimer}
    </p>
  </div>
</div>

<script>
  // Declare global functions for TypeScript
  declare global {
    function gtag(...args: any[]): void;
  }

  class ExitIntentPopup {
    private popup: HTMLElement;
    private closeBtn: HTMLButtonElement;
    private hasShown = false;
    private mouseY = 0;

    constructor() {
      this.popup = document.getElementById('exit-intent-popup') as HTMLElement;
      this.closeBtn = document.getElementById('close-popup') as HTMLButtonElement;
      
      if (!this.popup) return;

      this.init();
    }

    private init() {
      // Track mouse movement
      document.addEventListener('mousemove', (e) => {
        this.mouseY = e.clientY;
      });

      // Detect exit intent (mouse leaving top of viewport)
      document.addEventListener('mouseleave', (e) => {
        if (e.clientY <= 0 && !this.hasShown) {
          this.showPopup();
        }
      });

      // Close button
      this.closeBtn.addEventListener('click', () => this.hidePopup());

      // Close on background click
      this.popup.addEventListener('click', (e) => {
        if (e.target === this.popup) {
          this.hidePopup();
        }
      });

      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !this.popup.classList.contains('hidden')) {
          this.hidePopup();
        }
      });
    }

    private showPopup() {
      if (this.hasShown) return;
      
      this.hasShown = true;
      this.popup.classList.remove('hidden');
      
      // Trigger animation
      setTimeout(() => {
        const popupContent = this.popup.querySelector('.bg-white, .dark\\:bg-gray-900') as HTMLElement;
        if (popupContent) {
          popupContent.style.transform = 'scale(1)';
        }
      }, 10);

      // Track analytics event
      this.trackEvent('exit_intent_popup_shown');
    }

    private hidePopup() {
      this.popup.classList.add('hidden');
      this.trackEvent('exit_intent_popup_closed');
    }

    private trackEvent(eventName: string) {
      // Analytics tracking (implement with your preferred analytics)
      console.log(`Analytics: ${eventName}`);
      
      // Example with Google Analytics
      if (typeof gtag !== 'undefined') {
        gtag('event', eventName, {
          event_category: 'engagement',
          event_label: 'exit_intent_popup'
        });
      }
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ExitIntentPopup());
  } else {
    new ExitIntentPopup();
  }

  // Reinitialize after Astro transitions
  document.addEventListener('astro:after-swap', () => new ExitIntentPopup());
</script>

<style>
  #exit-intent-popup .bg-white,
  #exit-intent-popup .dark\\:bg-gray-900 {
    transform: scale(0.95);
    transition: transform 0.3s ease;
  }

  #exit-intent-popup:not(.hidden) .bg-white,
  #exit-intent-popup:not(.hidden) .dark\\:bg-gray-900 {
    transform: scale(1);
  }
</style>
